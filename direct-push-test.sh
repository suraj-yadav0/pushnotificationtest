#!/bin/bash

# Direct Push Helper Test Script
# This tests the push notification system directly using the compiled push helper
# Perfect for testing the complete notification pipeline!

echo "=== Direct Push Helper Notification Test ==="
echo "This script tests your push notification system directly!"
echo ""

# Configuration
APP_ID="pushnotification.surajyadav_pushnotification"
TEST_DIR="/tmp/direct-push-test"
PUSH_HELPER=""

# Find the push helper binary
echo "üîç Looking for push helper binary..."

if [ -f "/opt/click.ubuntu.com/pushnotification.surajyadav/current/push/push" ]; then
    PUSH_HELPER="/opt/click.ubuntu.com/pushnotification.surajyadav/current/push/push"
    echo "‚úÖ Found installed push helper: $PUSH_HELPER"
elif [ -f "./build/x86_64-linux-gnu/app/install/push/push" ]; then
    PUSH_HELPER="./build/x86_64-linux-gnu/app/install/push/push"
    echo "‚úÖ Found built push helper: $PUSH_HELPER"
elif [ -f "./build/all/app/push/push" ]; then
    PUSH_HELPER="./build/all/app/push/push"
    echo "‚úÖ Found push helper: $PUSH_HELPER"
else
    echo "‚ùå Push helper not found!"
    echo ""
    echo "Please build and install the app first:"
    echo "  $ clickable build"
    echo "  $ clickable install"
    exit 1
fi

# Create test directory
mkdir -p "$TEST_DIR"

# Function to test a notification
test_notification() {
    local test_name="$1"
    local input_json="$2"
    local expected_summary="$3"
    
    echo ""
    echo "üì± Testing: $test_name"
    echo "Input: $input_json"
    
    # Write input file
    echo "$input_json" > "$TEST_DIR/input.json"
    
    # Run push helper
    if timeout 10s "$PUSH_HELPER" "$TEST_DIR/input.json" "$TEST_DIR/output.json" 2>&1; then
        if [ -f "$TEST_DIR/output.json" ]; then
            echo "‚úÖ Push helper succeeded!"
            
            # Parse and display output
            local summary=$(jq -r '.notification.card.summary // "N/A"' "$TEST_DIR/output.json" 2>/dev/null)
            local body=$(jq -r '.notification.card.body // "N/A"' "$TEST_DIR/output.json" 2>/dev/null)
            local tag=$(jq -r '.notification.tag // "N/A"' "$TEST_DIR/output.json" 2>/dev/null)
            
            echo "   Summary: $summary"
            echo "   Body: $body"
            echo "   Tag: $tag"
            
            # Try to send the notification via system methods
            if command -v notify-send >/dev/null 2>&1; then
                notify-send "$summary" "$body" --app-name="Push Test" --urgency=normal
                echo "   üìÆ Sent via notify-send"
            fi
            
            # Save for postal service test
            cp "$TEST_DIR/output.json" "$TEST_DIR/postal_$test_name.json"
            
        else
            echo "‚ùå No output file generated"
        fi
    else
        echo "‚ùå Push helper failed or timed out"
    fi
}

# Test 1: Simple text message
test_notification "text_message" '{
    "message": {
        "loc_key": "MESSAGE_TEXT",
        "loc_args": ["Direct Test", "This notification was generated by the push helper directly!"],
        "badge": 1,
        "custom": {
            "from_id": "123456789"
        }
    }
}' "Direct Test"

# Test 2: Photo message
test_notification "photo_message" '{
    "message": {
        "loc_key": "MESSAGE_PHOTO",
        "loc_args": ["Test User"],
        "badge": 2,
        "custom": {
            "from_id": "987654321"
        }
    }
}' "Test User"

# Test 3: Group message
test_notification "group_message" '{
    "message": {
        "loc_key": "CHAT_MESSAGE_TEXT",
        "loc_args": ["Alice", "Test Group", "Hello everyone from direct test!"],
        "badge": 3,
        "custom": {
            "chat_id": "555666777"
        }
    }
}' "Alice"

# Test 4: Group creation
test_notification "group_invite" '{
    "message": {
        "loc_key": "CHAT_ADD_YOU",
        "loc_args": ["Bob", "New Group"],
        "badge": 4,
        "custom": {
            "chat_id": "888999000"
        }
    }
}' "Bob"

echo ""
echo "üóÑÔ∏è  Testing database functionality..."

# Check if database was created and populated
DB_PATH="$HOME/.local/share/$APP_ID/auxdb/auxdb.sqlite"
if [ -f "$DB_PATH" ]; then
    echo "‚úÖ Database exists: $DB_PATH"
    
    echo "Database contents:"
    sqlite3 "$DB_PATH" "SELECT 'Chat ID: ' || id || ', Unread: ' || unread_messages FROM chatlist_map;" 2>/dev/null || echo "Error reading database"
    
    echo "Total unread count:"
    sqlite3 "$DB_PATH" "SELECT SUM(unread_messages) FROM chatlist_map;" 2>/dev/null || echo "Error calculating total"
else
    echo "‚ö†Ô∏è  Database not found (might be created on first run)"
fi

echo ""
echo "üéØ Testing Postal Service Integration..."

# If we're on Ubuntu Touch, try to interact with Postal service
if [ -f "/etc/system-image/channel.ini" ]; then
    echo "Ubuntu Touch detected - testing Postal service..."
    
    if command -v busctl >/dev/null 2>&1; then
        echo "Available Postal services:"
        busctl list | grep -i postal || echo "No Postal services found"
        
        # Try to set badge count
        PKG_NAME="pushnotification_2esurajyadav"
        echo "Attempting to set badge count..."
        if busctl call --user com.lomiri.Postal "/com/lomiri/Postal/$PKG_NAME" com.lomiri.Postal SetCounter "sib" "$APP_ID" 5 true 2>/dev/null; then
            echo "‚úÖ Badge count set successfully"
        else
            echo "‚ö†Ô∏è  Could not set badge count (this is normal on desktop)"
        fi
    fi
else
    echo "Desktop environment detected - Postal service not available"
fi

echo ""
echo "üìä Test Summary:"
echo "=================="

notification_count=$(ls "$TEST_DIR"/postal_*.json 2>/dev/null | wc -l)
echo "üì± Notifications generated: $notification_count"

if [ $notification_count -gt 0 ]; then
    echo "‚úÖ Push helper is working correctly!"
    echo ""
    echo "Generated notification files:"
    for file in "$TEST_DIR"/postal_*.json; do
        if [ -f "$file" ]; then
            local name=$(basename "$file" .json | sed 's/postal_//')
            echo "   üìÑ $name: $(jq -r '.notification.card.summary' "$file" 2>/dev/null || echo "N/A")"
        fi
    done
    
    echo ""
    echo "üéâ SUCCESS! Your push notification system is working!"
    echo ""
    echo "Next steps:"
    echo "1. Real notifications need to come from Ubuntu Push Service"
    echo "2. Use server-example.py with real device tokens"
    echo "3. On Ubuntu Touch, notifications should appear in the indicator"
    
else
    echo "‚ùå No notifications were generated successfully"
    echo ""
    echo "Troubleshooting:"
    echo "1. Check that the app is built correctly: clickable build"
    echo "2. Install the app: clickable install"
    echo "3. Check push helper permissions"
    echo "4. Review error messages above"
fi

# Cleanup
rm -rf "$TEST_DIR"

echo ""
echo "=== Direct Push Helper Test Complete ==="
